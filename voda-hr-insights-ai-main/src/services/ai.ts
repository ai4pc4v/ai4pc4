export class AIService {
  private getApiKey(): string | null {
    // Replace with your actual OpenAI API key
    return '';
  }

  private async callOpenAI(prompt: string): Promise<string> {
    const apiKey = this.getApiKey();
    
    if (!apiKey) {
      throw new Error('OpenAI API key not found. Please enter your API key in settings.');
    }

    console.log('üöÄ Starting OpenAI API call...');
    console.log('üìù Using model: gpt-4o-mini');
    console.log('üîë API key exists:', !!apiKey);

    try {
      const requestBody = {
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: '–í–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –ø—ñ–¥–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª—É. –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—é —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—é.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.2,
      };

      console.log('üì§ Request body:', JSON.stringify(requestBody, null, 2));

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify(requestBody),
      });

      console.log('üì• Response status:', response.status);
      console.log('üì• Response ok:', response.ok);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Response error text:', errorText);
        let error;
        try {
          error = JSON.parse(errorText);
        } catch {
          error = { error: { message: errorText } };
        }
        
        // Handle specific error types
        
        if (response.status === 429 && error.error?.code === 'insufficient_quota') {
          throw new Error('‚ùå QUOTA EXCEEDED: Your OpenAI API key has no remaining credits. Please add funds at https://platform.openai.com/usage or upgrade your plan.');
        }
        
        throw new Error(`OpenAI API error: ${error.error?.message || response.statusText}`);
      }

      const data = await response.json();
      console.log('‚úÖ Response data:', data);
      return data.choices[0]?.message?.content || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI';
    } catch (error) {
      console.error('‚ùå OpenAI API error:', error);
      throw error;
    }
  }

  async generateJobDescription(position: string): Promise<string> {
    if (!this.getApiKey()) {
      return this.generateMockJobDescription(position);
    }

    const prompt = `–°—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó "${position}". 

–í–∫–ª—é—á—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏:
- –ü—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é (–∑–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å)
- –û—Å–Ω–æ–≤–Ω—ñ –æ–±–æ–≤'—è–∑–∫–∏ (5-7 –ø—É–Ω–∫—Ç—ñ–≤)
- –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤–∏–º–æ–≥–∏ (–æ—Å–≤—ñ—Ç–∞, –¥–æ—Å–≤—ñ–¥, –Ω–∞–≤–∏—á–∫–∏)
- –ë—É–¥–µ –ø–ª—é—Å–æ–º (–¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤–∞–≥–∏)
- –©–æ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ (—É–º–æ–≤–∏ —Ä–æ–±–æ—Ç–∏, –±–µ–Ω–µ—Ñ—ñ—Ç–∏)

–ó—Ä–æ–±—ñ—Ç—å –æ–ø–∏—Å –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–º —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º.`;

    return this.callOpenAI(prompt);
  }

  async compareCandidates(position: string, candidate1: any, candidate2: any): Promise<string> {
    if (!this.getApiKey()) {
      return this.generateMockCandidateComparison();
    }

    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –¥–≤–æ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é "${position}" —Ç–∞ –Ω–∞–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:

**–ö–ê–ù–î–ò–î–ê–¢ 1: ${candidate1.name}**
–†–µ–∑—é–º–µ: ${candidate1.resume || candidate1.resumeText || '–†–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ'}

–Ü–Ω—Ç–µ—Ä–≤'—é: ${candidate1.interview || candidate1.interviewText || '–Ü–Ω—Ç–µ—Ä–≤\'—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ'}

**–ö–ê–ù–î–ò–î–ê–¢ 2: ${candidate2.name}**
–†–µ–∑—é–º–µ: ${candidate2.resume || candidate2.resumeText || '–†–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ'}

–Ü–Ω—Ç–µ—Ä–≤'—é: ${candidate2.interview || candidate2.interviewText || '–Ü–Ω—Ç–µ—Ä–≤\'—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ'}

–ù–∞–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–∫–ª—é—á–∞—é—á–∏:

1. **–ö–æ—Ä–æ—Ç–∫–∏–π –æ–≥–ª—è–¥ –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞** (–¥–æ—Å–≤—ñ–¥, –∫–ª—é—á–æ–≤—ñ –Ω–∞–≤–∏—á–∫–∏, —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏)

2. **–î–µ—Ç–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏:**
   - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏
   - –¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏
   - –ú'—è–∫—ñ –Ω–∞–≤–∏—á–∫–∏ (–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è, –ª—ñ–¥–µ—Ä—Å—Ç–≤–æ, –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å)
   - –ú–æ—Ç–∏–≤–∞—Ü—ñ—è —Ç–∞ –∫—É–ª—å—Ç—É—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
   - –ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –¥–ª—è –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è

3. **SWOT-–∞–Ω–∞–ª—ñ–∑ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞**

4. **–§—ñ–Ω–∞–ª—å–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è** –∑ –æ–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è–º –≤–∏–±–æ—Ä—É

5. **–†–∏–∑–∏–∫–∏ —Ç–∞ –º—ñtig–∞—Ü—ñ—ó** –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞

–ë—É–¥—å—Ç–µ –æ–±'—î–∫—Ç–∏–≤–Ω–∏–º–∏ —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º–∏ —É —Å–≤–æ—î–º—É –∞–Ω–∞–ª—ñ–∑—ñ.`;

    return this.callOpenAI(prompt);
  }

  private generateMockJobDescription(position: string): string {
    return `**–î–ï–ú–û-–†–ï–ñ–ò–ú** (–í–≤–µ–¥—ñ—Ç—å OpenAI API –∫–ª—é—á –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI –∞–Ω–∞–ª—ñ–∑—É)

**–ü—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é**
–ú–∏ - –¥–∏–Ω–∞–º—ñ—á–Ω–∞ —Ç–∞ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è, —â–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ —Ä–æ–∑—Ä–æ–±—Ü—ñ –ø–µ—Ä–µ–¥–æ–≤–∏—Ö IT-—Ä—ñ—à–µ–Ω—å. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ —Ç–∞–ª–∞–Ω–æ–≤–∏—Ç–∏—Ö –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤, —è–∫—ñ –ø—Ä–∞–≥–Ω—É—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ —Å–≤—ñ—Ç–æ–≤–æ–≥–æ –∫–ª–∞—Å—É.

**–û–±–æ–≤'—è–∑–∫–∏**
‚Ä¢ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∏ –ø–æ–∑–∏—Ü—ñ—ó ${position}
‚Ä¢ –°–ø—ñ–≤–ø—Ä–∞—Ü—è –∑ –º—ñ–∂—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –±—ñ–∑–Ω–µ—Å-—Ü—ñ–ª–µ–π
‚Ä¢ –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ä–æ–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
‚Ä¢ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–≤—ñ—Ç—ñ–≤ —Ç–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ–π –¥–ª—è –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–∞
‚Ä¢ –£—á–∞—Å—Ç—å —É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ–º—É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ —Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—ñ–≤

**–í–∏–º–æ–≥–∏**
‚Ä¢ –û—Å–≤—ñ—Ç–∞: –≤–∏—â–∞ –æ—Å–≤—ñ—Ç–∞ –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ñ–∞—Ö–æ–º
‚Ä¢ –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏: –≤—ñ–¥ 3 —Ä–æ–∫—ñ–≤ –Ω–∞ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó
‚Ä¢ –í—ñ–¥–º—ñ–Ω–Ω–µ –∑–Ω–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤
‚Ä¢ –ù–∞–≤–∏—á–∫–∏ —Ä–æ–±–æ—Ç–∏ –∑ MS Office —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º –ü–ó
‚Ä¢ –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è —Ç–∞ —É–≤–∞–≥–∞ –¥–æ –¥–µ—Ç–∞–ª–µ–π

**–ë—É–¥–µ –ø–ª—é—Å–æ–º**
‚Ä¢ –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ—è—Ö
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –≥–∞–ª—É–∑–µ–π –∑–Ω–∞–Ω—å
‚Ä¢ –ó–Ω–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö –º–æ–≤
‚Ä¢ –î–æ—Å–≤—ñ–¥ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é

**–©–æ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ**
‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É
‚Ä¢ –ì–Ω—É—á–∫–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–¥–∞–ª–µ–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
‚Ä¢ –ú–µ–¥–∏—á–Ω–µ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏–π –ø–∞–∫–µ—Ç
‚Ä¢ –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è
‚Ä¢ –î—Ä—É–∂–Ω—é —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—é—á—É —Ä–æ–±–æ—á—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É`;
  }

  private generateMockCandidateComparison(): string {
    return `**–î–ï–ú–û-–†–ï–ñ–ò–ú** (–í–≤–µ–¥—ñ—Ç—å OpenAI API –∫–ª—é—á –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI –∞–Ω–∞–ª—ñ–∑—É)

**–ê–Ω–∞–ª—ñ–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤**

**–ö–∞–Ω–¥–∏–¥–∞—Ç 1 - –ö–æ—Ä–æ—Ç–∫–∏–π –æ–≥–ª—è–¥:**
‚Ä¢ –î–æ—Å–≤—ñ–¥: –î–æ—Å—Ç–∞—Ç–Ω—ñ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –¥–æ—Å–≤—ñ–¥
‚Ä¢ –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è: –•–æ—Ä–æ—à—ñ –Ω–∞–≤–∏—á–∫–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó
‚Ä¢ –ú'—è–∫—ñ –Ω–∞–≤–∏—á–∫–∏: –õ—ñ–¥–µ—Ä—Å—å–∫—ñ —è–∫–æ—Å—Ç—ñ, –∫–æ–º–∞–Ω–¥–Ω–∞ —Ä–æ–±–æ—Ç–∞
‚Ä¢ –¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏: –ü—Ä–æ—Ñ—ñ–ª—å–Ω—ñ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó

**–ö–∞–Ω–¥–∏–¥–∞—Ç 2 - –ö–æ—Ä–æ—Ç–∫–∏–π –æ–≥–ª—è–¥:**
‚Ä¢ –î–æ—Å–≤—ñ–¥: –ú–æ–ª–æ–¥—à–∏–π —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –∑ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª–æ–º
‚Ä¢ –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è: –†–æ–∑–≤–∏–≤–∞—î—Ç—å—Å—è –≤ –ø—É–±–ª—ñ—á–Ω–∏—Ö –≤–∏—Å—Ç—É–ø–∞—Ö  
‚Ä¢ –ú'—è–∫—ñ –Ω–∞–≤–∏—á–∫–∏: –ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å, –Ω–∞–≤—á–∞–Ω–Ω—è –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω—ñ—Å—Ç—å
‚Ä¢ –¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏: –°—É—á–∞—Å–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∑–Ω–∞–Ω–Ω—è

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:**
–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ AI-–∞–Ω–∞–ª—ñ–∑—É –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à OpenAI API –∫–ª—é—á —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.`;
  }

  hasApiKey(): boolean {
    return !!this.getApiKey();
  }

  setApiKey(apiKey: string): void {
    localStorage.setItem('openai_api_key', apiKey);
  }

  removeApiKey(): void {
    localStorage.removeItem('openai_api_key');
  }
}

export const aiService = new AIService();